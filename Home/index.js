import React, { useState } from 'react';
import {
  Text,
  TextInput,
  TouchableOpacity,
  Keyboard,
  TouchableWithoutFeedback,
  KeyboardAvoidingView,
  Animated,
} from 'react-native';
import Clipboard from '@react-native-community/clipboard';
import styles from './styles';

export default function Home() {
  // adding keyboard control for IOS
  Keyboard.dismiss();

  // useState variable definition
  const [url, setUrl] = useState('');
  const [name, setName] = useState('');
  const [urlFinal, setUrlFinal] = useState('');

  // add your api key
  const key = 'b305aa29e3e9a6784837870f1d354aaf9a4b3';

  // function to clear fields
  const clearInput = () => {
    setUrl('');
    setName('');
    setUrlFinal('');
  };

  // using fetch to build the link shortener api
  const short = async () => {
    
    // checks if the url starts with https or http, otherwise it will display an invalid url alert.
    if (url.includes('https://') || url.includes('http://')) {
      await fetch(`https://cutt.ly/api/api.php?key=${key}&short=${url}&name=${name}`)
      .then(async (response) => {
        const data = await response.json();
        
        // verifies the status, it can be consulted in the documentation of the api https://cutt.ly/
        if (data.url.status === 6) {
          alert('This domain has restrictions!');
          return;
        }
        if (data.url.status === 5) {
          alert('Url has invalid characters!');
          return;
        }
        if (data.url.status === 3) {
          alert('This name is already in use.');
          return;
        }
        if (data.url.status === 2) {
          alert('Url is invalid!');
          return;
        }
        // Otherwise, none of the previous alerts were successfully generated.
        setUrlFinal(data.url.shortLink);
      });

      return;
    }
    // Alert displayed if it does not pass the first http and https check
    alert('Enter a valid url!');
  };

  // Function to copy the url generated by the shortener
  function copyUrl() {
    Clipboard.setString(urlFinal);
    alert('Url successfully copied!');
  }

  return (
    <TouchableWithoutFeedback onPress={Keyboard.dismiss}>
      <KeyboardAvoidingView style={styles.container} behavior="padding">
        <Animated.View>
          <Text style={styles.title}>Url
            <Text style={{ color: '#45B8AC' }}>Shortener</Text>
          </Text>
        </Animated.View>
        
        <TextInput
          style={styles.urlInput}
          onChangeText={(texto) => setUrl(texto)}
          value={url}
          placeholder="Enter the url..."
          clearButtonMode="always"
        />

        <TextInput
          style={styles.urlInput}
          onChangeText={(texto) => setName(texto)}
          value={name}
          placeholder="Customized name..."
          clearButtonMode="always"
        />

        <TouchableWithoutFeedback onPress={urlFinal ? copyUrl : () => {}}>
          <Animated.View style={styles.urlInput}>
            <Text style={styles.finalUrl}>{urlFinal}</Text>
          </Animated.View>
        </TouchableWithoutFeedback>

        <TouchableOpacity onPress={() => short()} style={styles.shortBtn}>
          <Text style={{ color: '#FFF' }}>Shorten</Text>
        </TouchableOpacity>

        <TouchableOpacity onPress={() => clearInput()} style={styles.shortBtn}>
          <Text style={{ color: '#FFF' }}>Reset</Text>
        </TouchableOpacity>
      </KeyboardAvoidingView>
    </TouchableWithoutFeedback>
  );
}
